unit AnalizeTRD;

{$mode objfpc}{$H+}

interface

uses
  Classes, SysUtils, FileUtil, Forms, Controls, Graphics, Process;

type
  StartAnalize = class(TThread)
  private


    { Private declarations }
  protected
  var
    KType, AllKernel, ActKernel, Signature, RemKernel, KlSize, RootTmp,
    Trash, UserTmp, UserRDoc, UrpmiCache, MozCache, ChromeCache,
    DiskUsage, OperaCache: TStringList;

    procedure Execute; override;
    procedure StartProc;
  end;

implementation

uses Unit1;

{ TRD }

procedure StartAnalize.Execute;
var
  ExProcess: TProcess;
begin
  try
    FreeOnTerminate := True;
    KType := TStringList.Create;        //тип ядра
    AllKernel := TStringList.Create;    //все ядра
    ActKernel := TStringList.Create;    //активное ядро
    Signature := TStringList.Create;    //сигнатура активного ядра
    RemKernel := TStringList.Create;    //удаляемые ядра
    KlSize := TStringList.Create;       //вес удаляемых ядер
    RootTmp := TStringList.Create;      //временные файлы root
    Trash := TStringList.Create;        //корзина пользователя
    UserTmp := TStringList.Create;      //временные файлы пользователя
    UserRDoc := TStringList.Create;     //каталог RecentDocuments
    UrpmiCache := TStringList.Create;   //кеш URPMI
    MozCache := TStringList.Create;     //кеш Mozilla
    ChromeCache := TStringList.Create;  //кеш Google Chrome
    OperaCache := TStringList.Create;   //кеш Opera
    DiskUsage := TStringList.Create;    //Использование HDD

    ExProcess := TProcess.Create(nil);
    ExProcess.Executable := 'sh';
    ExProcess.Options := ExProcess.Options + [poUsePipes, poWaitOnExit];

    //Узнаём тип ядра KType
    ExProcess.Parameters.Add('-c');
    ExProcess.Parameters.Add('for ktype in "server" "desktop" "linus"; do ' +
      'if [ -n "$(echo $(uname -r) | grep $ktype)" ]; then break; fi; done; echo $ktype');
    ExProcess.Execute;
    KType.LoadFromStream(ExProcess.Output); //KType[0] - тип ядра

    //Начитываем список всех ядер
    ExProcess.Parameters.Delete(1);
    ExProcess.Parameters.Add('allkernel=$(rpm -qa kernel-' + KType[0] +
      '* --qf ' + '''%{name} %{installtime}\n''' + ' | ' +
      'grep -v "latest" | sort -nk 2 | awk ' + '''{ print $1 }''' +
      '); echo "$allkernel"');
    ExProcess.Execute;
    AllKernel.LoadFromStream(ExProcess.Output);
    //Выгружаем в файл
    AllKernel.SaveToFile(ExtractFilePath(ParamStr(0)) + 'remkernel');

    //Выделяем активное ядро
    ExProcess.Parameters.Delete(1);
    ExProcess.Parameters.Add('actkernel=$(echo "' + Trim(AllKernel.Text) +
      '" | grep -v "devel" | tail -n 1); echo "$actkernel"');
    ExProcess.Execute;
    ActKernel.LoadFromStream(ExProcess.Output);

    //Вычисляю сигнатуру активного ядра
    ExProcess.Parameters.Delete(1);
    ExProcess.Parameters.Add('signature=$(echo ' + ActKernel[0] +
      '| sed ' + '''s/[^0-9]/' + '/g''' + '); echo $signature');
    ExProcess.Execute;
    Signature.LoadFromStream(ExProcess.Output);

    //Начитываем ядра на удаление по сигнатуре
    ExProcess.Parameters.Delete(1);
    ExProcess.Parameters.Add('while read LINE; do ' + 'if [[ $(echo $LINE | sed ' +
      '''s/[^0-9]/' + '/g''' + ') -eq "' + Signature[0] + '" ]]; then ' +
      'sed -i "/$LINE/d" "' + ExtractFilePath(ParamStr(0)) + 'remkernel"; ' +
      'fi; done < "' + ExtractFilePath(ParamStr(0)) + 'remkernel"');
    ExProcess.Execute;
    RemKernel.LoadFromFile(ExtractFilePath(ParamStr(0)) + 'remkernel');

    //Рассчитываю вес удаляемых ядер
    if Trim(RemKernel.Text) <> '' then
    begin
      ExProcess.Parameters.Delete(1);
      ExProcess.Parameters.Add('klsize=$(rpm -qi ' +
        StringReplace(RemKernel.Text, #10, ' ', [rfReplaceAll]) +
        ' | grep "Size" | cut -f 2 -d : -s | cut -c 2-); ' +
        'klsize=$(echo $klsize | sed ' + '''s/ /+/g''' +
        '); let "klsize=($klsize) / 1048576"; echo $klsize Мбайт');
      ExProcess.Execute;
      KlSize.LoadFromStream(ExProcess.Output);
    end
    else
      KlSize.Text := '0 Мбайт';

    /////КОРЗИНЫ и ПРОЧЕЕ //////////

    //Каталог /root/tmp
    ExProcess.Parameters.Delete(1);
    ExProcess.Parameters.Add('if [ -d "/root/tmp" ]; then ' +
      'roottmp=$(du -sh /root/tmp | awk ' + '''{ ' + 'print $1' +
      ' }''' + '); else roottmp="нет"; fi; echo $roottmp');
    ExProcess.Execute;
    RootTmp.LoadFromStream(ExProcess.Output);

    //Корзина пользователя
    ExProcess.Parameters.Delete(1);
    ExProcess.Parameters.Add('if [ -d "/home/' + ActUser[0] +
      '/.local/share/Trash" ]; then ' + 'trash=$(du -sh /home/' +
      ActUser[0] + '/.local/share/Trash | awk ' + '''{ ' + 'print $1' +
      ' }''' + '); else trash="нет"; fi; echo $trash');
    ExProcess.Execute;
    Trash.LoadFromStream(ExProcess.Output);

    //Временные файлы пользователя
    ExProcess.Parameters.Delete(1);
    ExProcess.Parameters.Add('if [ -d "/home/' + ActUser[0] +
      '/tmp" ]; then ' + 'usertmp=$(du -sh /home/' + ActUser[0] +
      '/tmp | awk ' + '''{ ' + 'print $1' + ' }''' +
      '); else usertmp="нет"; fi; echo $usertmp');
    ExProcess.Execute;
    UserTmp.LoadFromStream(ExProcess.Output);

    //Каталог RecentDocuments
    ExProcess.Parameters.Delete(1);
    ExProcess.Parameters.Add('if [ -d "/home/' + ActUser[0] +
      '/.local/share/RecentDocuments" ]; then ' + 'userrdoc=$(du -sh /home/' +
      ActUser[0] + '/.local/share/RecentDocuments | awk ' + '''{ ' +
      'print $1' + ' }''' + '); else userrdoc="нет"; fi; echo $userrdoc');
    ExProcess.Execute;
    UserRDoc.LoadFromStream(ExProcess.Output);

    //Каталог RecentDocuments
    ExProcess.Parameters.Delete(1);
    ExProcess.Parameters.Add('if [ -d "/var/cache/urpmi" ]; then ' +
      'urpmicache=$(du -sh /var/cache/urpmi | awk ' + '''{ ' + 'print $1' +
      ' }''' + '); else urpmicache="нет"; fi; echo $urpmicache');
    ExProcess.Execute;
    UrpmiCache.LoadFromStream(ExProcess.Output);

    //Кеш Mozilla Firefox
    ExProcess.Parameters.Delete(1);
    ExProcess.Parameters.Add('if [ -d "/home/' + ActUser[0] +
      '/.cache/mozilla" ]; then ' + 'mozcache=$(du -sh /home/' +
      ActUser[0] + '/.cache/mozilla | awk ' + '''{ ' + 'print $1' +
      ' }''' + '); else mozcache="нет"; fi; echo $mozcache');
    ExProcess.Execute;
    MozCache.LoadFromStream(ExProcess.Output);

    //Кеш Google Chrome
    ExProcess.Parameters.Delete(1);
    ExProcess.Parameters.Add('if [ -d "/home/' + ActUser[0] +
      '/.cache/google-chrome" ]; then ' + 'chromecache=$(du -sh /home/' +
      ActUser[0] + '/.cache/google-chrome | awk ' + '''{ ' + 'print $1' +
      ' }''' + '); else chromecache="нет"; fi; echo $chromecache');
    ExProcess.Execute;
    ChromeCache.LoadFromStream(ExProcess.Output);

    //Кеш Opera
    ExProcess.Parameters.Delete(1);
    ExProcess.Parameters.Add('if [ -d "/home/' + ActUser[0] +
      '/.cache/opera" ]; then ' + 'operacache=$(du -sh /home/' +
      ActUser[0] + '/.cache/opera | awk ' + '''{ ' + 'print $1' +
      ' }''' + '); else operacache="нет"; fi; echo $operacache');
    ExProcess.Execute;
    OperaCache.LoadFromStream(ExProcess.Output);

    //Использование HDD
    ExProcess.Parameters.Delete(1);
    ExProcess.Parameters.Add('df / --output=pcent | tail -n 1 | cut -d% -f1');
    ExProcess.Execute;
    DiskUsage.LoadFromStream(ExProcess.Output);

  finally
    ExProcess.Free;
    Synchronize(@StartProc);
  end;
end;

procedure StartAnalize.StartProc;
begin
  try
    //Показываем список всех ядер
    MainForm.AllKernelMemo.Lines.Assign(AllKernel);

    //Показываем активное ядро
    MainForm.Label1.Caption := ActKernel[0];

    //Показываем список удаляемых ядер
    MainForm.RemKernelMemo.Lines.Assign(RemKernel);

    //Показываем вес удаляемых ядер
    MainForm.Label6.Caption := KlSize[0];

    //Каталог /root/tmp
    MainForm.Label24.Caption := RootTmp[0];

    //Показываем вес корзины:
    MainForm.Label10.Caption := Trash[0];

    //Показываем вес временных файлов:
    MainForm.Label12.Caption := UserTmp[0];

    //Показываем вес RecentDocuments:
    MainForm.Label14.Caption := UserRDoc[0];

    //Показываем кеш URPMI:
    MainForm.Label16.Caption := UrpmiCache[0];

    //Кеш Mozilla Firefox:
    MainForm.Label18.Caption := MozCache[0];

    //Кеш Google Chrome:
    MainForm.Label20.Caption := ChromeCache[0];

    //Кеш Opera:
    MainForm.Label22.Caption := OperaCache[0];

    //Использование диска
    MainForm.Label26.Caption := Trim(DiskUsage[0]) + '%';

  finally
    MainForm.ClearBtn.Enabled := True;

    //Скрываем прогресс
    MainForm.Timer1.Enabled := False;
    MainForm.ProgressBar1.Visible := False;
    MainForm.ProgressBar1.Position := 0;
    MainForm.ClearBtn.Enabled := True;
    MainForm.StartBtn.Enabled := True;

    MainForm.Panel1.Caption := 'анализ завершен';

    KType.Free;
    AllKernel.Free;
    ActKernel.Free;
    Signature.Free;
    RemKernel.Free;
    KlSize.Free;
    RootTmp.Free;
    Trash.Free;
    UserTmp.Free;
    UserRDoc.Free;
    UrpmiCache.Free;
    ChromeCache.Free;
    OperaCache.Free;
    DiskUsage.Free;

    Screen.Cursor := crDefault;

    //Терминируем поток
    Terminate;
  end;
end;

end.
